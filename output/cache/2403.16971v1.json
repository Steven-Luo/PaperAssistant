{
  "id": "2403.16971v1",
  "title": "LLM Agent Operating System",
  "pdf_url": "http://arxiv.org/pdf/2403.16971v1",
  "raw_tldr": "动机：大型语言模型（LLM）集成和部署智能代理面临挑战，影响其效率和效果，如代理请求的次优调度和资源分配、与LLM交互时维持上下文的困难，以及不同能力和专业领域的异构代理集成的复杂性。\n\n方法：本文提出了AIOS，一个将大型语言模型嵌入操作系统（OS）的LLM代理操作系统。AIOS旨在优化资源分配、促进代理间的上下文切换、实现代理的并发执行、为代理提供工具服务，并维护代理的访问控制。\n\n结果：我们的实验在多个代理的并发执行上展示了AIOS模块的可靠性和效率，旨在提高LLM代理的性能和效率，同时也为未来AIOS生态系统的更好开发和部署开辟道路。项目开源地址为 https://github.com/agiresearch/AIOS。",
  "tldr": {
    "动机：大型语言模型（LLM）集成和部署智能代理面临挑战，影响其效率和效果，如代理请求的次优调度和资源分配、与LLM交互时维持上下文的困难，以及不同能力和专业领域的异构代理集成的复杂性。": "",
    "方法：本文提出了AIOS，一个将大型语言模型嵌入操作系统（OS）的LLM代理操作系统。AIOS旨在优化资源分配、促进代理间的上下文切换、实现代理的并发执行、为代理提供工具服务，并维护代理的访问控制。": "",
    "结果：我们的实验在多个代理的并发执行上展示了AIOS模块的可靠性和效率，旨在提高LLM代理的性能和效率，同时也为未来AIOS生态系统的更好开发和部署开辟道路。项目开源地址为 https://github.com/agiresearch/AIOS。": "",
    "动机": "",
    "方法": "",
    "结果": ""
  },
  "summary_cn": "大型语言模型（LLM）为基础的智能代理的集成和部署一直面临着挑战，这些挑战影响了它们的效率和效力。其中包括代理请求在LLM上的次优调度和资源分配、在代理与LLM之间的互动中保持上下文的困难，以及集成具有不同能力和专业的异构代理所固有的复杂性。代理数量和复杂性的快速增长进一步加剧了这些问题，常常导致瓶颈和资源的次优利用。受这些挑战的启发，本文介绍了AIOS，一个将大型语言模型嵌入操作系统（OS）的LLM代理操作系统。具体来说，AIOS旨在优化资源分配，促进代理间的上下文切换，使代理能够并发执行，为代理提供工具服务，并维护代理的访问控制。我们展示了这样一个操作系统的架构，概述了它旨在解决的核心挑战，并提供了AIOS的基本设计和实现。我们对多个代理并发执行的实验表明了我们AIOS模块的可靠性和效率。通过此，我们的目标不仅是提高LLM代理的性能和效率，而且还为未来AIOS生态系统的更好开发和部署开辟道路。该项目在https://github.com/agiresearch/AIOS上是开源的。",
  "tag_info_raw": "```json\n{\n  \"主要领域\": \"多模态\",\n  \"标签\": [\"大型语言模型\", \"智能代理\", \"资源分配\", \"上下文维护\", \"操作系统\", \"AIOS\", \"并发执行\", \"性能提升\", \"开源\"]\n}\n```",
  "tag_info": {
    "主要领域": "多模态",
    "标签": [
      "大型语言模型",
      "智能代理",
      "资源分配",
      "上下文维护",
      "操作系统",
      "AIOS",
      "并发执行",
      "性能提升",
      "开源"
    ]
  }
}